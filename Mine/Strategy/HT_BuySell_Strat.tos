## ###################
## Notes
## ###################
declare hide_on_intraday;
# - With some functions the chart adds 72 bars to the specified durations.  As a result, the numbers based on a time range will not match (eg On Balance Volume).
# - Each section below will be enabled by an enablement switch and provides an indicator and possibly a buy/sell signal.

## ###################
## Optional Enter-After
## ###################
# #hint enterAfterDate:  enter an order after this date - 0 disables.
# def enterAfterDate = 0;
def buyAfterIsTrue = 1; # (GetYYYYMMDD() >= enterAfterDate);

## ###################
## Optional Enter-Above
## ###################
# #hint enterAbovePrice:  enter an order when above this price - 0 disables.
# #input enterAbovePrice = 0;
def buyOverIsTrue = 0; # if (enterAbovePrice > 0) then (close >= enterAbovePrice) else 0;

#hint minHoldingPeriod: the minimum number of bars after a buy before a sell is allowed
input minHoldingPeriod = 20;

#hint buyAmount: the dollar value target for purchases.  n=buyAmount/price
input buyAmount = 2400;

## ###################
## enablement switches
## ###################
#hint enableOnBalanceVolume:  enable OnBalanceVolumeModified strategy
input enableOnBalanceVolume = 1;
#hint enableMACDCross: enable MACDCross strategy 
input enableMACDCross = 1;

## ###################
## Disable if too early
## ###################
# #hint minimumSecondsSinceBell
# #input minimumSecondsSinceBell = 900;
def notTooEarly = 1; #  if (GetAggregationPeriod() < AggregationPeriod.DAY) then (GetTime() > (RegularTradingStart(GetYYYYMMDD()) + minimumSecondsSinceBell)) else 1;


## ####################
## Chart markers
## ####################
# #hint ATRMultiple: A muliple to increase the ATR gap
#input ATRMultiple = 1.25;
#hint ATRPeriod: ATR The number of bars used to calculate the Average True Range. Was 29.
input ATRPeriod = 20;
#hint ATRBuyFactor: ATR The multiplier of the ATR value.  Default 4.5.
input ATRBuyFactor = 4.5;
#hint ATRSellFactor: ATR The multiplier of the ATR value.  Default 6.0
input ATRSellFactor = 6.0;
#hint ATRaverageType: ATR The type of moving average to be used in calculations: simple, exponential, weighted, Wilder's, or Hull.
input ATRaverageType = AverageType.WILDERS;
#def barNums = if close then (barnumber()) else double.nan;
#def lastBarNum = highestall( barNums );
#def firstBarNum = lastBarNum - minHoldingPeriod;
#def midBarNumb  = lastBarNum - (minHoldingPeriod / 2);
#def isAfterFirst = barnumber() > firstBarNum;
#def isLastBar = (barnumber() == lastBarNum);
#def isOnOrAfterLast = (barnumber() >= lastBarNum);
#def isFirstBar = barnumber() == firstBarNum + 1;
#def isMidPeriod = barnumber() == midBarNumb + 1;

#def lowsSinceStart = if barnumber() > firstBarNum then (low) else double.nan;
#def lastDayLow  = if isLastBar then (low) else double.nan;
#def lastDayHigh = if isLastBar then (high) else double.nan;
#def lastDayClose = if isLastBar then (close) else double.nan;
#def lastATR     = if isLastBar then (ATR(ATRPeriod, ATRaverageType) * ATRMultiple) else lastATR[1];

def atrFactor = (ATRBuyFactor + ATRSellFactor) / 2.0;
#def currentATRPct = lastATR / close;
#def stopLimitPct =  Round( ( (atrFactor * lastATR)/close ) * 100.0, 2);
#def stopLimitPrc =  Round( close - (atrFactor * lastATR), 2);

#plot lo20      = if isAfterFirst then lowestall( lowsSinceStart ) else double.nan;
#plot lo20      = lowest( low, 20 );
#def lowestLastDayClose = lowestall( lastDayClose );
#def highestLastDayHigh = highestall( lastDayHigh );
#def lowestLastDayLow   = lowestall( lastDayLow );
#plot lastClose = if isOnOrAfterLast then lowestLastDayClose else double.nan;
#plot plusXATR  = if isOnOrAfterLast then highestLastDayHigh + (ATRSellFactor * lastATR ) else double.nan;
#plot plusATR   = if isOnOrAfterLast then highestLastDayHigh + lastATR else double.nan;
#plot lessXATR  = if isOnOrAfterLast then lowestLastDayLow - (ATRBuyFactor * lastATR ) else double.nan;
#plot lessATR   = if isOnOrAfterLast then lowestLastDayLow - lastATR else double.nan;
#plot plus5pct  = if isOnOrAfterLast then lowestLastDayClose * 1.05 else double.nan;
#plot less5pct  = if isOnOrAfterLast then lowestLastDayClose * 0.95 else double.nan;

#lo20.SetStyle( Curve.SHORT_DASH );
#lo20.SetDefaultColor( Color.Yellow );
#lastClose.SetStyle( Curve.SHORT_DASH );
#lastClose.SetDefaultColor( Color.Gray );
#plus5pct.SetStyle( Curve.SHORT_DASH );
#plus5pct.SetDefaultColor( Color.Gray );
#less5pct.SetStyle( Curve.SHORT_DASH );
#less5pct.SetDefaultColor( Color.Gray );

#plusATR.SetStyle( Curve.SHORT_DASH );
#plusATR.SetDefaultColor( Color.LIGHT_ORANGE );
#lessATR.SetStyle( Curve.SHORT_DASH );
#lessATR.SetDefaultColor( Color.LIGHT_ORANGE );
#plusXATR.SetStyle( Curve.MEDIUM_DASH );
#plusXATR.SetDefaultColor( Color.DARK_ORANGE );
#lessXATR.SetStyle( Curve.MEDIUM_DASH );
#lessXATR.SetDefaultColor( Color.DARK_ORANGE );


## #######################
## ATR Trailing Stop Limit
## #######################
Assert(atrFactor > 0, "'atr factor' must be positive: " + atrFactor);
def HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));
def HRef = if low <= high[1]    then high - close[1]    else (high - close[1]) - 0.5 * (low - high[1]);
def LRef = if high >= low[1]    then close[1] - low     else (close[1] - low) - 0.5 * (low[1] - high);
def trueRange = Max(HiLo, Max(HRef, LRef));
def loss = atrFactor * MovingAverage( ATRaverageType, trueRange, ATRPeriod);
def state = {default init, long, short};
def trail;
switch (state[1]) {
case init:
    if (!IsNaN(loss)) {
        state = state.long;
        trail =  close - loss;
    } else {
        state = state.init;
        trail = Double.NaN;
    }
case long:
    if (close > trail[1]) {
        state = state.long;
        trail = Max(trail[1], close - loss);
    } else {
        state = state.short;
        trail = close + loss;
    }
case short:
    if (close < trail[1]) {
        state = state.short;
        trail = Min(trail[1], close + loss);
    } else {
        state = state.long;
        trail =  close - loss;
    }
}
def TSBuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);
def TSSellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);
#plot TrailingStop = trail;
#TrailingStop.SetHiding( 1 );
#TrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);
#TrailingStop.DefineColor( "Buy", GetColor(6) );
#TrailingStop.DefineColor( "Sell", GetColor(5) );
#TrailingStop.AssignValueColor( if state == state.long    then #TrailingStop.Color( "Sell" )    else TrailingStop.Color( "Buy" ) );


## ###################
## Volume : OnBalanceVolumeModified
## Buy when the OBVM is increasing and crosses above the signal while the volume is greater than the average
## ###################
#hint OBVMLength:  the number of bars for the OnBalanceVolume calculation. (Likely plus 71 bars.) Default is 7.
input OBVMLength = 7;
#hint OBVMSignalLength:  the number of bars for the OBVM Signal line.  OBVMLength must be less thsn the Signal Length.  Default is 10.
input OBVMSignalLength = 10;
Assert( OBVMLength < OBVMSignalLength, "OBVM Length (" + OBVMLength + ") must be less than the Signal Length (" + OBVMSignalLength + ")" );
#hint OBVMAverageType: average type used for OBVM
input OBVMAverageType = AverageType.EXPONENTIAL;
#hint VolumeAvgLength: bars for volume average.  default is 50.
input VolumeAvgLength = 50;
#
def Vol = Sign(close - close[1]) * volume;
def VolAvg = Average( volume, VolumeAvgLength );
#
def OBV = reference OnBalanceVolume();
def OBVM = MovingAverage( OBVMAverageType, OBV, OBVMLength );
def OBVMSignal = MovingAverage( OBVMAverageType, OBVM, OBVMSignalLength );
#
def isVolGrowing = Vol > VolAvg;
# OBVM is good if it is higher than the signal and moving up.
def isOBVMGood = (OBVM > OBVMSignal) and (OBVM > OBVM[1]);
# OBVM is bad if it is lower than the signal and moving down.
def isOBVMBad = (OBVM < OBVMSignal) and (OBVM < OBVM[1]);
# Buy on OBVM cross up - the prior OBVM was below the prior signal
def isOBVMBuy = enableOnBalanceVolume and isOBVMGood and (OBVM[1] < OBVMSignal[1]) and isVolGrowing;
# Sell on OBVM cross down - the prior OBVM was above the prior signal
def isOBVMSell = enableOnBalanceVolume and isOBVMBad and (OBVM[1] > OBVMSignal[1]);
#


## ###################
## MACD Cross: from MACDCustom
## Buy when the MACD crosses above the Signal
## ###################
#hint MACDFastLength:  default=12
input MACDFastLength = 12;
#hint MACDSlowLength: default=26
input MACDSlowLength = 26;
#hint MACDLength: default=9
input MACDLength = 9;
#hint MACDAverageType: exponential
input MACDAverageType = AverageType.EXPONENTIAL;
def MACDValue = MovingAverage( MACDAverageType, close, MACDFastLength ) - MovingAverage( MACDAverageType, close, MACDSlowLength );
def MACDAvg   = MovingAverage( MACDAverageType, MACDValue, MACDLength );
# MACD is good if it is above the average
def isMACDGood = (MACDValue > MACDAvg) and ( MACDValue > MACDValue[1] );
# MACD is bad if it is below the average
def isMACDBad  = (MACDValue < MACDAvg) and ( MACDValue < MACDValue[1] );
# Buy when the macd crosses above and is higher than yesterday
def isMACDBuy = enableMACDCross and isMACDGood and (MACDValue[1] < MACDAvg[1]);
# Sell when macd crosses below and is lower than yesterday
def isMACDSell = enableMACDCross and isMACDBad and (MACDValue[1] > MACDAvg[1]);


## ############################################################
## Track the bars since the last buy to avoid selling too soon.
## ############################################################
def isStrategyBuy  =  isOBVMBuy or isMACDBuy or TSBuySignal;
def isStrategySell =  isOBVMSell or isMACDSell or TSSellSignal;
def barsSinceBuy = if isStrategyBuy 
                    then 0 else barsSinceBuy[1] + 1;
def okToSell = isStrategySell and (barsSinceBuy > minHoldingPeriod);
def okToBuy  = buyAfterIsTrue and isStrategyBuy and ( ! isStrategySell );
# def okToBuy  =  isStrategyBuy and ( ! isStrategySell );


#AddVerticalLine( isFirstBar or isMidPeriod, GetYYYYMMDD(), Color.ORANGE, curve.SHORT_DASH);

## ###################################
## show labels for ATR and Stop Limits
## ###################################
#hint minimumHoldingBuyFactor: a factor that determines the minimum amount we must have before buying more
input minimumHoldingBuyFactor = 55;
#hint minHolding: the minimum market value.  The amount we would be willing to lose if the price went to 0. Default=1000
input minHolding = 1000;
#hint maximumHoldingFactor: a factor that determines the most we should have of the security at the current gain
input maximumHoldingFactor = 65;


#def maxSellPercentGain = Round( (ATRSellFactor * currentATRPct * 100 / 2.5), 2);
#def minBuyPercentGain  = Round( (ATRBuyFactor * currentATRPct * 100 / 1.75), 2 );

plot isSell =  okToSell ;
plot isBuy =  notTooEarly and (buyOverIsTrue or okToBuy);;
isSell.SetHiding( 1 );
isBuy.SetHiding( 1 );
#strongSell.SetHiding( 1 );
#strongBuy.SetHiding( 1 );

## ############################################################
## Buy Orders
## ############################################################
AddOrder( OrderType.BUY_TO_OPEN,
            isBuy,
            open[-1],
            tradeSize = Max( 1.0, Floor( buyAmount / open[-1] ) ),
            tickColor = GetColor(1),
            arrowColor = GetColor(1),
            name = if TSBuySignal then "TSBuy" 
                    else if isOBVMBuy then "OBVMBuy"
                    else if isMACDBuy then "MACDBuy"
                    else "BUY"
);

# def fpl = if  barNumber() == 0 then 0 else fpl[1] + if isBuy then close else if isSell then -close else 0;

## ############################################################
## Sell Orders
## ############################################################
AddOrder( OrderType.SELL_TO_CLOSE,
            isSell,
            open[-1],
            tickColor = GetColor(0),
            arrowColor = GetColor(0),
            name = if TSSellSignal then "TSSell" 
                    else if isOBVMSell then "OBVMSell"
                    else if isMACDSell then "MACDSell"
                    else "SELL"
);

## ###################################
# AddLabel( 1,
#     "ATR=" + Round( lastATR, 1 )
#     + ", ATR%=" + Round( currentATRPct * 100, 1 )
#     + ", TS%=" + stopLimitPct
#     + ", 0.6*ATR%=" + Round( currentATRPct * 100 * 0.6 , 2 )
#     + ", 1.5*ATR%=" + Round( currentATRPct * 100 * 1.5 , 2 )
#     #+ ", Yld=" + Round( GetYield() * 100, 1 )
#     + "  "
#     #+ ", TRG=" + stopLimitPrc
#     #+ ", LMT=" + Round(stopLimitPrc * 0.995, 2)
#     ,
#     if close < trail then Color.UPTICK 
#     else Color.GRAY
# );

## ###################################
# AddLabel( 1, 
#    " Buy " + Max( 1.0, Floor( buyAmount / 4 / open ) )
#    + " BID> " + Round( if (close<trail) then trail else (close*1.05), 2)
#    + "   "
#     #+ ", CNCL MARK>" + Round(trail * (1 + currentATRPct), 2)
#     #+ ", Amt: " + max( ceil(trail * 2 * (1+currentATRPct)), 700 ) 
#     ,
#     if close < trail then Color.UPTICK 
#     else Color.GRAY
# );

## ###################################
# AddLabel( 1, 
#     "Sell ASK<" + Round(trail / (1 - currentATRPct) / (1 - 0.0125), 2)
#     + ", ATR=" + Round( currentATRPct * 100, 1 )
#    + "%, CNCL MARK<" + Round(trail, 2) + "  "
#     ,
#     if close > trail then Color.DOWNTICK 
#     else Color.GRAY
# );GetTime() < RegularTradingStart(GetYYYYMMDD());

## ###################################
# AddLabel( 1, 
#     "Div: " + Round(GetYield() * 100, 2) + "  "
#     , Color.UPTICK
# );

# def bn = if  barNumber() == 0 then barNumber() else bn[1] + barNumber();
# plot FPLVal = fpl;

