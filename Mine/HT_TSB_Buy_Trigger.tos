## Buy based on OBV, MACD, or TS

## ####################
## Variables
## ####################
#hint ATRPeriod: ATR The number of bars used to calculate the Average True Range. Was 29.
input ATRPeriod = 20;
#hint atrFactor: ATR The multiplier of the ATR value.  Default 4.5.
input atrFactor = 4.5;
#hint ATRaverageType: ATR The type of moving average to be used in calculations: simple, exponential, weighted, Wilder's, or Hull.
input ATRaverageType = AverageType.WILDERS;

## #######################
## ATR Trailing Stop Limit
## #######################
Assert(ATRFactor > 0, "'atr factor' must be positive: " + ATRFactor);
def HiLo = Min(high - low, 1.5 * Average(high - low, ATRPeriod));
def HRef = if low <= high[1]    then high - close[1]    else (high - close[1]) - 0.5 * (low - high[1]);
def LRef = if high >= low[1]    then close[1] - low     else (close[1] - low) - 0.5 * (low[1] - high);
def trueRange = Max(HiLo, Max(HRef, LRef));
def loss = ATRFactor * MovingAverage( ATRaverageType, trueRange, ATRPeriod);
def state = {default init, long, short};
def trail;
switch (state[1]) {
case init:
    if (!IsNaN(loss)) {
            state = state.long;
            trail =  close - loss;
    } else {
        state = state.init;
        trail = Double.NaN;
    }
case long:
    if (close > trail[1]) {
        state = state.long;
        trail = Max(trail[1], close - loss);
    } else {
        state = state.short;
        trail = close + loss;
    }
case short:
    if (close < trail[1]) {
        state = state.short;
        trail = Min(trail[1], close + loss);
    } else {
        state = state.long;
        trail =  close - loss;
    }
}
def TSBuySignal = Crosses(state == state.long, 0, CrossingDirection.ABOVE);
def TSSellSignal = Crosses(state == state.short, 0, CrossingDirection.ABOVE);

## ###################
## Volume : OnBalanceVolumeModified
## Buy when the OBVM is increasing and crosses above the signal while the volume is greater than the average
## ###################
#hint OBVMLength:  the number of bars for the OnBalanceVolume calculation. (Likely plus 71 bars.) Default is 7.
input OBVMLength = 7;
#hint OBVMSignalLength:  the number of bars for the OBVM Signal line.  OBVMLength must be less thsn the Signal Length.  Default is 10.
input OBVMSignalLength = 10;
Assert( OBVMLength < OBVMSignalLength, "OBVM Length (" + OBVMLength + ") must be less than the Signal Length (" + OBVMSignalLength + ")" );
#hint OBVMAverageType: average type used for OBVM
input OBVMAverageType = AverageType.EXPONENTIAL;
#hint VolumeAvgLength: bars for volume average.  default is 50.
input VolumeAvgLength = 50;
#
def Vol = Sign(close - close[1]) * volume;
def VolAvg = Average( volume, VolumeAvgLength );
#
def OBV = reference OnBalanceVolume();
def OBVM = MovingAverage( OBVMAverageType, OBV, OBVMLength );
def OBVMSignal = MovingAverage( OBVMAverageType, OBVM, OBVMSignalLength );
#
def isVolGrowing = Vol > VolAvg;
# OBVM is good if it is higher than the signal and moving up.
def isOBVMGood = (OBVM > OBVMSignal) and (OBVM > OBVM[1]);
# OBVM is bad if it is lower than the signal and moving down.
def isOBVMBad = (OBVM < OBVMSignal) and (OBVM < OBVM[1]);
# Buy on OBVM cross up - the prior OBVM was below the prior signal
def isOBVMBuy =  isOBVMGood and (OBVM[1] < OBVMSignal[1]) and isVolGrowing;
# Sell on OBVM cross down - the prior OBVM was above the prior signal
def isOBVMSell =  isOBVMBad and (OBVM[1] > OBVMSignal[1]);

## ###################
## MACD Cross: from MACDCustom
## Buy when the MACD crosses above the Signal
## ###################
#hint MACDFastLength:  default=12
input MACDFastLength = 12;
#hint MACDSlowLength: default=26
input MACDSlowLength = 26;
#hint MACDLength: default=9
input MACDLength = 9;
#hint MACDAverageType: exponential
input MACDAverageType = AverageType.EXPONENTIAL;
def MACDValue = MovingAverage( MACDAverageType, close, MACDFastLength ) - MovingAverage( MACDAverageType, close, MACDSlowLength );
def MACDAvg   = MovingAverage( MACDAverageType, MACDValue, MACDLength );
# MACD is good if it is above the average
def isMACDGood = (MACDValue > MACDAvg) and ( MACDValue > MACDValue[1] );
# MACD is bad if it is below the average
def isMACDBad  = (MACDValue < MACDAvg) and ( MACDValue < MACDValue[1] );
# Buy when the macd crosses above and is higher than yesterday
def isMACDBuy =  isMACDGood and (MACDValue[1] < MACDAvg[1]);
# Sell when macd crosses below and is lower than yesterday
def isMACDSell = isMACDBad and (MACDValue[1] > MACDAvg[1]);

## ###################################
plot strongSell =  (isOBVMSell or isMACDSell or TSSellSignal);
plot strongBuy  =  ( (isOBVMBuy or isMACDBuy or TSBuySignal) and (! strongSell));

#def lastATR       = ATR(ATRPeriod, ATRaverageType);
#ef currentATRPct = lastATR / close;
#AddLabel( 1, 
#    if close < trail then "Buy SBMT BID>" + Round(trail, 2)
#    + ", CNCL MARK>" + Round(trail * (1 + currentATRPct), 2)
#    + ", Amt: " + max( ceil(trail * 2 * (1+currentATRPct)), 700 ) 
#    else "Sell SBMT ASK<" + Round(trail, 2)
#    + ", CNCL MARK<" + Round(trail * (1 - currentATRPct), 2)
#    ,
#    if close < trail then Color.UPTICK 
#    else Color.DOWNTICK
#);

#def position = Round( trail *  ( if strongBuy then 1.15 else 0.80 ), 2 );
#AddChartBubble ( (strongBuy or strongSell)
#                 , position
#                 , (if strongBuy then "Buy " else "Sell ") + trail
#                 , if strongBuy then Color.UPTICK else Color.DOWNTICK
#                 , 1 );