#ken.rose@tdameritrade.com
#Study used for Generating Income with Dividend Stocks Webcast 
#taught Monday @ 7PM ET  
# https://events.thinkorswim.com/#/webcast
# I build custom studies like earnings trend as part of my Thursday night thinkscript webinar @ 5:30PM ET  
#     https://events.thinkorswim.com/#/webcast 
#suggest using 10 year monthly charts
#plots forecasted dividend Yields (dividendPayout * 4 / price)
#Price is adjusted for one stock split

declare lower;
Input HiYield_Percentage = .85;
Input LowYield_Percentag = .15;
input Label_Color_Choice = {"magenta", "green", "pink", "orange", default "red", "cyan", "blue", "gray", "violet"};

def StockSplitBar = if !isnan(getsplitnumerator()) then BarNumber() else 0;
def SplitBar = HighestAll(StockSplitBar);
def StockSplit =  getsplitNumerator()/getsplitDenominator();
def SplitValue = HighestAll(StockSplit);

def RunningDividend = if !isnan(getdividend())then getdividend() else RunningDividend[1];

#################################################################
def SplitHasOccured = if !isnan(getsplitNumerator())then 1 else SplitHasOccured[1];
def DivFollowSplitHasOccurred = compoundvalue(1,if  DivFollowSplitHasOccurred[1]>0 then  DivFollowSplitHasOccurred[1] else if SplitHasOccured>0 and !isnan(getdividend())then 1 else  DivFollowSplitHasOccurred[1],0);
#################################################################

def RunningYield = if runningdividend>0 then (if splitbar>0 and barnumber()<splitbar  then (runningDividend*4/(close * splitvalue))*100  else 
    if splithasOccured==1 and DivFollowSplitHasOccurred==0 then      
    (runningDividend*4/(close*SplitValue))* 100

else 
    if splitbar > 0 and barnumber() >= splitbar then      
    (runningDividend*4/(close))* 100 else if splitbar==0 then (runningDividend*4/(close) *100) else  RunningYield[1])else double.NaN;

def YieldForecast = if splitbar > 0 and barnumber() < splitbar and getdividend() > 0 then getdividend() * 4 / (close * SplitValue ) else
    if splitbar > 0 and barnumber() >= splitbar and getdividend() > 0 then      
    getdividend()*4/(close) else
    getdividend()*4 / close;
def YieldForecastPlot = YieldForecast * 100;
plot HistoricalYields = YieldForecastPlot;

def HiYield = Highestall(YieldForecastPlot);
def lowYield = lowestAll(YieldForecastPlot);
def highbar = if close >0 then highbar[1] +1 else highbar[1];
def DiffY = (HiYield - LowYield);
plot LowYprcnt = Lowyield + (LowYield_Percentag * DiffY);
LowYprcnt.SetLineWeight(3);
LowYprcnt.AssignValueColor(color.red);
plot HiYPoint = Lowyield + (HiYield_Percentage * DiffY);
HiYPoint.SetLineWeight(3);
HiYPoint.AssignValueColor(color.red);
#########################################################Under Construction####
def Bars = if close > 0 then barnumber()else 0;
def BarsTotal = highestAll(bars);
def FinalChartYield = if barnumber()== (BarsTotal) then YieldForecastPlot else 0;
def FinalYield = highestAll(finalChartYield);
def TimeBelowYield = if yieldForecastPlot<finalYield then FinalYield[1]+1 else FinalYield[1];
def TimeBelowPercentage = TimeBelowYield/BarsTotal;
#AddLabel(yes, "Time Below: " + YieldForecastPlot + "%", GetColor(label_color_choice)); 
############################################################################

HistoricalYields.SetPaintingStrategy(PaintingStrategy.squares);
HistoricalYields.AssignValueColor(color.DARK_GRAY);
HistoricalYields.SetLineWeight(5);

#plot PSplitHasOccured = SplitHasOccured ; #  RunningYield YieldForecastPlot
#plot pDivFollowSplit =  DivFollowSplitHasOccurred;
plot pRunningYield = RunningYield;
pRunningYield.SetDefaultColor(color.GREEN);
pRunningYield.SetLineWeight(2);

